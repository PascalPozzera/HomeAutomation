plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.protobuf' version '0.9.1'
}

group = 'at.fhv.sysarch.lab2'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://repo.akka.io/maven"
    }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext {
    akkaVersion = '2.7.0'
    akkaHttpVersion = '10.5.0'
    grpcVersion = '1.53.0'
    protobufVersion = '3.21.7'
    scalaVersion = '2.13'
    pahoVersion = '1.2.5'
    jacksonVersion = '2.14.2'
}

configurations {
    // Resolve conflicts between Spring Boot and Akka for logging
    implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // Akka
    implementation platform("com.typesafe.akka:akka-bom_${scalaVersion}:${akkaVersion}")
    implementation "com.typesafe.akka:akka-actor-typed_${scalaVersion}"
    implementation "com.typesafe.akka:akka-actor_${scalaVersion}"
    implementation "com.typesafe.akka:akka-slf4j_${scalaVersion}"
    implementation "com.typesafe.akka:akka-stream_${scalaVersion}"

    // gRPC
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    // For Java 9+ compatibility
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    // MQTT
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${pahoVersion}"

    // JSON
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "org.json:json:20230227"

    // For testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

// Set duplicates strategy for all copy tasks
tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Protobuf configuration for gRPC
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Include generated sources in source sets
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/grpc'
        }
        resources {
            srcDirs 'src/main/proto'
        }
    }
}

// Force gRPC to compile before Java files
compileJava.dependsOn("generateProto")

// Show more detail for errors
tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

test {
    useJUnitPlatform()
}

// Task to run the Order Processor Server separately
task runOrderProcessor(type: JavaExec) {
    group = 'application'
    description = 'Runs the Order Processor Server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'at.fhv.sysarch.lab2.homeautomation.orderprocessor.OrderProcessorServer'
}

springBoot {
    mainClass = 'at.fhv.sysarch.lab2.HomeAutomationApplication'
}

// Task to check and print the location of generated files
task checkGeneratedSources {
    doLast {
        def generatedJavaDir = file("build/generated/source/proto/main/java")
        def generatedGrpcDir = file("build/generated/source/proto/main/grpc")

        println "Generated Java directory exists: ${generatedJavaDir.exists()}"
        println "Generated gRPC directory exists: ${generatedGrpcDir.exists()}"

        if (generatedJavaDir.exists()) {
            println "Files in generated Java directory:"
            generatedJavaDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    println " - ${file.absolutePath}"
                }
            }
        }

        if (generatedGrpcDir.exists()) {
            println "Files in generated gRPC directory:"
            generatedGrpcDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    println " - ${file.absolutePath}"
                }
            }
        }
    }
}